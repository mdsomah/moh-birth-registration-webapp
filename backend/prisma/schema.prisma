generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//? User Model
model User {
  id                   String              @id @default(dbgenerated("nanoid()")) @db.VarChar(22)
  lastName             String              @db.VarChar(255)
  firstName            String              @db.VarChar(255)
  middleName           String?             @db.VarChar(255)
  displayName          String              @db.VarChar(255)
  primaryPhoneNumber   String              @db.VarChar(225)
  secondaryPhoneNumber String?             @db.VarChar(225)
  email                String              @unique @db.VarChar(225)
  userName             String              @unique @db.VarChar(255)
  rememberMe           Boolean?            @default(false)
  role                 String
  password             String              @db.VarChar(255)
  confirmPassword      String              @db.VarChar(255)
  photo                String?             @default("")
  userRole             UserRole            @relation(fields: [userRoleId], references: [id])
  userRoleId           String
  passwordResetToken   PasswordResetToken?
  rememberToken        RememberToken?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  @@index([userRoleId])
  @@map(name: "user")
}

//? UserRole Model
model UserRole {
  id        String   @id @default(dbgenerated("nanoid()")) @db.VarChar(22)
  roleName  String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "userRole")
}

//? PasswordResetToken Model
model PasswordResetToken {
  id        String   @id @default(dbgenerated("nanoid()")) @db.VarChar(22)
  token     String
  expiresAt String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map(name: "passwordResetToken")
}

//? RememberToken Model
model RememberToken {
  id        String   @id @default(dbgenerated("nanoid()")) @db.VarChar(22)
  token     String
  expiresAt String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map(name: "rememberToken")
}

//? Applicant Model
model Applicant {
  id                     String           @id @default(dbgenerated("nanoid()")) @db.VarChar(22)
  applicantPhoto         String
  formNumber             String?          @default("")
  applicantSex           String
  dateOfApplication      String
  applicantFirstName     String           @db.VarChar(255)
  applicantMiddleName    String?          @db.VarChar(255)
  applicantLastName      String           @db.VarChar(255)
  applicantFacility      String           @db.VarChar(255)
  applicantTownOrCity    String           @db.VarChar(255)
  applicantCounty        String           @db.VarChar(255)
  applicantCountry       String           @db.VarChar(255)
  applicantDateOfBirth   String
  applicantFather        ApplicantFather?
  applicantMother        ApplicantMother?
  applicantSignature     String
  applicantContactNumber String           @db.VarChar(14)
  attestation            Attestation?
  parentOrGuardianPhoto  String
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt

  @@map(name: "applicant")
}

//? ApplicantFather Model
model ApplicantFather {
  id                         String     @id @default(dbgenerated("nanoid()")) @db.VarChar(22)
  fatherName                 String     @db.VarChar(255)
  fatherNationality          String     @db.VarChar(255)
  fatherAge                  Int
  fatherTownOrCity           String     @db.VarChar(255)
  fatherCounty               String     @db.VarChar(255)
  fatherCountry              String     @db.VarChar(255)
  fatherCountyOfOrigin       String     @db.VarChar(255)
  fatherOccupation           String     @db.VarChar(255)
  fatherDateOfNaturalization String
  isFatherLiving             String
  fatherPresentAddress       String?    @db.VarChar(255)
  fatherTelephoneNumber      String?    @db.VarChar(14)
  applicant                  Applicant? @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId                String?    @unique
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt

  @@index([applicantId])
  @@map(name: "applicantFather")
}

//? ApplicantMother Model
model ApplicantMother {
  id                         String     @id @default(dbgenerated("nanoid()")) @db.VarChar(22)
  motherName                 String     @db.VarChar(255)
  motherNationality          String     @db.VarChar(255)
  motherAge                  Int
  motherTownOrCity           String     @db.VarChar(255)
  motherCounty               String     @db.VarChar(255)
  motherCountry              String     @db.VarChar(255)
  motherCountyOfOrigin       String     @db.VarChar(255)
  motherOccupation           String     @db.VarChar(255)
  motherDateOfNaturalization String
  isMotherLiving             String
  motherPresentAddress       String?    @db.VarChar(255)
  motherTelephoneNumber      String?    @db.VarChar(14)
  applicant                  Applicant? @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId                String?    @unique
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt

  @@index([applicantId])
  @@map(name: "applicantMother")
}

//? Attestation Model
model Attestation {
  id             String     @id @default(dbgenerated("nanoid()")) @db.VarChar(22)
  fullName       String     @db.VarChar(255)
  city           String     @db.VarChar(255)
  county         String     @db.VarChar(255)
  motherFullName String     @db.VarChar(255)
  fatherFullName String     @db.VarChar(255)
  date           String
  cityOrTown     String     @db.VarChar(255)
  name           String     @db.VarChar(255)
  address        String     @db.VarChar(255)
  relationship   String     @db.VarChar(255)
  contactNumber  String?    @db.VarChar(14)
  applicant      Applicant? @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId    String?    @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([applicantId])
  @@map(name: "attestation")
}
